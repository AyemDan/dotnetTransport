using Microsoft.AspNetCore.Mvc; using MongoDB.Driver; using Transport.Shared.Entities; using Transport.Shared.Entities.MongoDB; using Transport.Shared.DTOs; using Transport.Shared.Enums; using MongoDB.Bson; namespace ProviderApp.Controllers; [ApiController] [Route("api/providers")] public class ProviderController : ControllerBase { private readonly IMongoCollection<Provider> _providers; private readonly ILogger<ProviderController> _logger; private readonly HttpClient _httpClient; public ProviderController(IMongoDatabase database, ILogger<ProviderController> logger, HttpClient httpClient) { _providers = database.GetCollection<Provider>("providers"); _logger = logger; _httpClient = httpClient; } [HttpPost("register")] public async Task<IActionResult> RegisterProvider([FromBody] ProviderRegistrationDto registrationDto) { try { var existingProvider = await _providers.Find(p => p.Email == registrationDto.Email).FirstOrDefaultAsync(); if (existingProvider != null) { return BadRequest("Provider with this email already exists"); } var provider = new Provider(registrationDto.Email, registrationDto.Password) { Name = registrationDto.Name, CompanyName = registrationDto.CompanyName, LicenseNumber = registrationDto.LicenseNumber, ContactNumber = registrationDto.ContactNumber, Address = registrationDto.Address, CreatedAt = DateTime.UtcNow, IsActive = true }; await _providers.InsertOneAsync(provider); await _httpClient.PostAsJsonAsync("http://localhost:5128/api/auth/register", new { UserId = provider.Id, Email = provider.Email, Password = registrationDto.Password, Role = provider.Role.ToString() }); return Ok(new { Message = "Provider registered successfully", ProviderId = provider.Id }); } catch (Exception ex) { _logger.LogError(ex, "Error registering provider"); return StatusCode(500, "Internal server error"); } } [HttpGet("{providerId}")] public async Task<IActionResult> GetProvider(string providerId) { try { if (!Guid.TryParse(providerId, out var providerGuid)) { return BadRequest("Invalid provider ID format"); } var provider = await _providers.Find(p => p.Id == providerGuid).FirstOrDefaultAsync(); if (provider == null) { return NotFound("Provider not found"); } return Ok(provider); } catch (Exception ex) { _logger.LogError(ex, "Error retrieving provider"); return StatusCode(500, "Internal server error"); } } [HttpPut("{providerId}")] public async Task<IActionResult> UpdateProvider(string providerId, [FromBody] ProviderUpdateDto updateDto) { try { if (!Guid.TryParse(providerId, out var providerGuid)) { return BadRequest("Invalid provider ID format"); } var update = Builders<Provider>.Update .Set(p => p.Name, updateDto.Name) .Set(p => p.ContactNumber, updateDto.ContactNumber) .Set(p => p.LicenseNumber, updateDto.LicenseNumber) .Set(p => p.UpdatedAt, DateTime.UtcNow); var result = await _providers.UpdateOneAsync(p => p.Id == providerGuid, update); if (result.MatchedCount == 0) { return NotFound("Provider not found"); } return Ok("Provider updated successfully"); } catch (Exception ex) { _logger.LogError(ex, "Error updating provider"); return StatusCode(500, "Internal server error"); } } [HttpGet] public async Task<IActionResult> GetAllProviders() { try { var providers = await _providers.Find(p => p.IsActive).ToListAsync(); return Ok(providers); } catch (Exception ex) { _logger.LogError(ex, "Error retrieving providers"); return StatusCode(500, "Internal server error"); } } } public class ProviderRegistrationDto { public string Name { get; set; } = string.Empty; public string Email { get; set; } = string.Empty; public string Password { get; set; } = string.Empty; public string CompanyName { get; set; } = string.Empty; public string LicenseNumber { get; set; } = string.Empty; public string? ContactNumber { get; set; } public string? Address { get; set; } } public class ProviderUpdateDto { public string Name { get; set; } = string.Empty; public string? ContactNumber { get; set; } public string LicenseNumber { get; set; } = string.Empty; }
