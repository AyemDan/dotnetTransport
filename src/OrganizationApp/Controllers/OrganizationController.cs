using Microsoft.AspNetCore.Mvc; using MongoDB.Driver; using Transport.Shared.Entities; using Transport.Shared.Enums; using MongoDB.Bson; namespace OrganizationApp.Controllers; [ApiController] [Route("api/organizations")] public class OrganizationController : ControllerBase { private readonly IMongoCollection<Organization> _organizations; private readonly IMongoCollection<Admin> _admins; private readonly ILogger<OrganizationController> _logger; private readonly HttpClient _httpClient; public OrganizationController(IMongoDatabase database, ILogger<OrganizationController> logger, HttpClient httpClient) { _organizations = database.GetCollection<Organization>("organizations"); _admins = database.GetCollection<Admin>("admins"); _logger = logger; _httpClient = httpClient; } [HttpPost("register")] public async Task<IActionResult> RegisterOrganization([FromBody] OrganizationRegistrationDto registrationDto) { try { var organization = new Organization { Id = Guid.NewGuid(), Name = registrationDto.Name, Address = registrationDto.Address, CreatedAt = DateTime.UtcNow }; await _organizations.InsertOneAsync(organization); var admin = new Admin(registrationDto.AdminEmail, registrationDto.AdminPassword, AdminLevel.SuperAdmin) { Name = registrationDto.AdminName, CreatedAt = DateTime.UtcNow }; await _admins.InsertOneAsync(admin); await _httpClient.PostAsJsonAsync("http://localhost:5128/api/auth/register", new { UserId = admin.Id, Email = admin.Email, Password = registrationDto.AdminPassword, Role = admin.Role.ToString() }); return Ok(new { Message = "Organization registered successfully", OrganizationId = organization.Id, AdminId = admin.Id }); } catch (Exception ex) { _logger.LogError(ex, "Error registering organization"); return StatusCode(500, "Internal server error"); } } [HttpGet("{organizationId}")] public async Task<IActionResult> GetOrganization(string organizationId) { try { if (!Guid.TryParse(organizationId, out var orgGuid)) { return BadRequest("Invalid organization ID format"); } var organization = await _organizations.Find(o => o.Id == orgGuid).FirstOrDefaultAsync(); if (organization == null) { return NotFound("Organization not found"); } return Ok(organization); } catch (Exception ex) { _logger.LogError(ex, "Error retrieving organization"); return StatusCode(500, "Internal server error"); } } [HttpGet] public async Task<IActionResult> GetAllOrganizations() { try { var organizations = await _organizations.Find(_ => true).ToListAsync(); return Ok(organizations); } catch (Exception ex) { _logger.LogError(ex, "Error retrieving organizations"); return StatusCode(500, "Internal server error"); } } } public class OrganizationRegistrationDto { public string Name { get; set; } = string.Empty; public string Address { get; set; } = string.Empty; public string AdminName { get; set; } = string.Empty; public string AdminEmail { get; set; } = string.Empty; public string AdminPassword { get; set; } = string.Empty; }
